parameters:
  - name: configuration
    type: object
    default: {}
  - name: configurationDefaults
    type: object
    default:
      defaultPool:
        vmImage: "ubuntu-latest"
      serviceConnection: serviceConnection
      actionGroups: []
      enableProduction: false
      runReviewStage: true
      drInvocation: false
      variableRoot: vars
      variables:
        includeCommon: true
        includeEnv: true
        includeEnvRegion: false
        includeRegion: true
      variableGroups:
        - "Common-Variables"
      validation:
        enableVariableIncludes: true
      additionalRepositories: []
      keyVault:
        name: ""
        secretsFilter: ""
  - name: skipEnvironments
    type: object
    default:
      dev: false
      qa: false
      ppr: false
  - name: environments
    type: object
    default:
      - name: dev
        class: development
        dependsOnSecondaryRegions: false
        primaryRegion: weu
        secondaryRegions:
          - neu
        drRegion: neu
        allowedBranches:
          - "*"
        pool:
          vmImage: "ubuntu-latest"
        poolRegionDemand: false
      - name: qa
        class: test
        dependsOnSecondaryRegions: false
        primaryRegion: weu
        allowedBranches:
          - "feature/*"
          - "release/*"
        pool:
          vmImage: "ubuntu-latest"
        poolRegionDemand: false
      - name: ppr
        class: acceptance
        dependsOnSecondaryRegions: false
        primaryRegion: weu
        secondaryRegions:
          - neu
        allowedBranches:
          - "main"
          - "release/*"
        pool:
          vmImage: "ubuntu-latest"
        poolRegionDemand: false
      - name: prd
        class: production
        primaryRegion: weu
        secondaryRegions:
          - neu
        drRegion: neu
        allowedBranches:
          - "release/*"
        pool:
          vmImage: "ubuntu-latest"
        poolRegionDemand: true

extends:
  template: /templates/pipeline-common-dispatcher.yml@PipelineDispatcher
  parameters:
    configuration:
      ${{ each pair in parameters.configurationDefaults }}:
        ${{ pair.key }}: ${{ coalesce(parameters.configuration[pair.key], pair.value) }}
      ${{ each pair in parameters.configuration }}:
        ${{ if eq(parameters.configurationDefaults[pair.key], '') }}:
          ${{ pair.key }}: ${{ pair.value }}
  
      # ${{ if gt(length(parameters.configuration), 0) }}:
      #   ${{ each pair in parameters.configuration }}:
      #     ${{ pair.key }}: ${{ pair.value }}
      # ${{ each pair in parameters.configurationDefaults }}:
      #   ${{ if not(contains(parameters.configuration, pair.key)) }}:
      #     ${{ pair.key }}: ${{ pair.value }}
      environments:
        ${{ each env in parameters.environments }}:
          - name: ${{ env.name }}
            ${{ each prop in env }}:
              ${{ if ne(prop.key, 'name') }}:
                ${{ prop.key }}: ${{ prop.value }}
            ${{ if contains(parameters.skipEnvironments, env.name) }}:
              skipEnvironment: ${{ parameters.skipEnvironments[env.name] }}
            ${{ else }}:
              skipEnvironment: false
